// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: admin_user.proto

package admin_user

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AdminUser service

func NewAdminUserEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AdminUser service

type AdminUserService interface {
	AdminUserlogin(ctx context.Context, in *AdminUserRequest, opts ...client.CallOption) (*AdminUserResponse, error)
	FrontUserList(ctx context.Context, in *FrontUsersRequest, opts ...client.CallOption) (*FrontUsersResponse, error)
}

type adminUserService struct {
	c    client.Client
	name string
}

func NewAdminUserService(name string, c client.Client) AdminUserService {
	return &adminUserService{
		c:    c,
		name: name,
	}
}

func (c *adminUserService) AdminUserlogin(ctx context.Context, in *AdminUserRequest, opts ...client.CallOption) (*AdminUserResponse, error) {
	req := c.c.NewRequest(c.name, "AdminUser.AdminUserlogin", in)
	out := new(AdminUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUserService) FrontUserList(ctx context.Context, in *FrontUsersRequest, opts ...client.CallOption) (*FrontUsersResponse, error) {
	req := c.c.NewRequest(c.name, "AdminUser.FrontUserList", in)
	out := new(FrontUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdminUser service

type AdminUserHandler interface {
	AdminUserlogin(context.Context, *AdminUserRequest, *AdminUserResponse) error
	FrontUserList(context.Context, *FrontUsersRequest, *FrontUsersResponse) error
}

func RegisterAdminUserHandler(s server.Server, hdlr AdminUserHandler, opts ...server.HandlerOption) error {
	type adminUser interface {
		AdminUserlogin(ctx context.Context, in *AdminUserRequest, out *AdminUserResponse) error
		FrontUserList(ctx context.Context, in *FrontUsersRequest, out *FrontUsersResponse) error
	}
	type AdminUser struct {
		adminUser
	}
	h := &adminUserHandler{hdlr}
	return s.Handle(s.NewHandler(&AdminUser{h}, opts...))
}

type adminUserHandler struct {
	AdminUserHandler
}

func (h *adminUserHandler) AdminUserlogin(ctx context.Context, in *AdminUserRequest, out *AdminUserResponse) error {
	return h.AdminUserHandler.AdminUserlogin(ctx, in, out)
}

func (h *adminUserHandler) FrontUserList(ctx context.Context, in *FrontUsersRequest, out *FrontUsersResponse) error {
	return h.AdminUserHandler.FrontUserList(ctx, in, out)
}
