// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user_serve.proto

package user_serve

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Userserve service

func NewUserserveEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Userserve service

type UserserveService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (Userserve_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Userserve_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (Userserve_BidiStreamService, error)
}

type userserveService struct {
	c    client.Client
	name string
}

func NewUserserveService(name string, c client.Client) UserserveService {
	return &userserveService{
		c:    c,
		name: name,
	}
}

func (c *userserveService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Userserve.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userserveService) ClientStream(ctx context.Context, opts ...client.CallOption) (Userserve_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "Userserve.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &userserveServiceClientStream{stream}, nil
}

type Userserve_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type userserveServiceClientStream struct {
	stream client.Stream
}

func (x *userserveServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *userserveServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *userserveServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userserveServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userserveServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userserveServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *userserveService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Userserve_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Userserve.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &userserveServiceServerStream{stream}, nil
}

type Userserve_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type userserveServiceServerStream struct {
	stream client.Stream
}

func (x *userserveServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *userserveServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *userserveServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userserveServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userserveServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userserveServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userserveService) BidiStream(ctx context.Context, opts ...client.CallOption) (Userserve_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "Userserve.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &userserveServiceBidiStream{stream}, nil
}

type Userserve_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type userserveServiceBidiStream struct {
	stream client.Stream
}

func (x *userserveServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *userserveServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *userserveServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userserveServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userserveServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userserveServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *userserveServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Userserve service

type UserserveHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, Userserve_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, Userserve_ServerStreamStream) error
	BidiStream(context.Context, Userserve_BidiStreamStream) error
}

func RegisterUserserveHandler(s server.Server, hdlr UserserveHandler, opts ...server.HandlerOption) error {
	type userserve interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type Userserve struct {
		userserve
	}
	h := &userserveHandler{hdlr}
	return s.Handle(s.NewHandler(&Userserve{h}, opts...))
}

type userserveHandler struct {
	UserserveHandler
}

func (h *userserveHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.UserserveHandler.Call(ctx, in, out)
}

func (h *userserveHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.UserserveHandler.ClientStream(ctx, &userserveClientStreamStream{stream})
}

type Userserve_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type userserveClientStreamStream struct {
	stream server.Stream
}

func (x *userserveClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *userserveClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userserveClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userserveClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userserveClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *userserveHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.UserserveHandler.ServerStream(ctx, m, &userserveServerStreamStream{stream})
}

type Userserve_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type userserveServerStreamStream struct {
	stream server.Stream
}

func (x *userserveServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *userserveServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userserveServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userserveServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userserveServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *userserveHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.UserserveHandler.BidiStream(ctx, &userserveBidiStreamStream{stream})
}

type Userserve_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type userserveBidiStreamStream struct {
	stream server.Stream
}

func (x *userserveBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *userserveBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userserveBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userserveBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userserveBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *userserveBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
